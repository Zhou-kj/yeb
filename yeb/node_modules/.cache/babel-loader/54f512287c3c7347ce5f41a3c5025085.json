{"ast":null,"code":"// import axios from 'axios'\n// import { escape } from 'core-js/fn/regexp'\n// const service = axios.create({\n//     responseType: 'arraybuffer'\n// })\n// service.interceptors.request.use(config => {\n//     config.headers['Authorization'] = window.sessionStorage.getItem('tokenStr')\n//     return config\n// }, err => {\n//     console.log(err)\n// })\n// service.interceptors.response.use(resp => {\n//     const headers = resp.headers\n//     let reg = RegExp(/application\\/json/)\n//     if (headers['content-type'].match(reg)) { // 如果返回json字符串\n//         resp.data = unitToString(resp.data)\n//     } else { // 如果返回的是流\n//         let fileDownload = require('js-file-download')\n//         let fileName = headers['content-disposition'].split(';')[1].split('filename=')[1]\n//         let contentType = headers['content-type']\n//         fileName = decodeURIComponent(fileName) // 转换防止乱码\n//         fileDownload(resp.data, fileName, contentType)\n//     }\n// }, err => {\n//     console.log(err)\n// })\n// // 如果返回的是json字符串则重新编码返回\n// function unitToString(unitArray) {\n//     let encodedString = String.fromCharCode.apply(null, new Uint8Array(unitArray))\n//     let decodedString = decodeURIComponent(escape(encodedString))\n//     return JSON.parse(decodedString)\n// }\n// let base = ''\n// export const downloadRequest = (url, params) => {\n//     return service({\n//         method: 'get',\n//         url: `${base}${url}`,\n//         data: params\n//     })\n// }\n// export default service\nimport axios from \"axios\";\nlet base = 'http://localhost:8081';\nexport const downloadRequest = url => {\n  return axios({\n    method: 'post',\n    url: `${base}${url}`,\n    responseType: 'arraybuffer'\n  });\n};","map":{"version":3,"names":["axios","base","downloadRequest","url","method","responseType"],"sources":["E:/web-code/yeb/src/utils/download.js"],"sourcesContent":["// import axios from 'axios'\r\n// import { escape } from 'core-js/fn/regexp'\r\n\r\n// const service = axios.create({\r\n//     responseType: 'arraybuffer'\r\n// })\r\n\r\n// service.interceptors.request.use(config => {\r\n//     config.headers['Authorization'] = window.sessionStorage.getItem('tokenStr')\r\n//     return config\r\n// }, err => {\r\n//     console.log(err)\r\n// })\r\n\r\n// service.interceptors.response.use(resp => {\r\n//     const headers = resp.headers\r\n//     let reg = RegExp(/application\\/json/)\r\n//     if (headers['content-type'].match(reg)) { // 如果返回json字符串\r\n//         resp.data = unitToString(resp.data)\r\n//     } else { // 如果返回的是流\r\n//         let fileDownload = require('js-file-download')\r\n//         let fileName = headers['content-disposition'].split(';')[1].split('filename=')[1]\r\n//         let contentType = headers['content-type']\r\n//         fileName = decodeURIComponent(fileName) // 转换防止乱码\r\n//         fileDownload(resp.data, fileName, contentType)\r\n\r\n//     }\r\n// }, err => {\r\n//     console.log(err)\r\n// })\r\n\r\n// // 如果返回的是json字符串则重新编码返回\r\n// function unitToString(unitArray) {\r\n//     let encodedString = String.fromCharCode.apply(null, new Uint8Array(unitArray))\r\n//     let decodedString = decodeURIComponent(escape(encodedString))\r\n//     return JSON.parse(decodedString)\r\n// }\r\n\r\n// let base = ''\r\n\r\n// export const downloadRequest = (url, params) => {\r\n//     return service({\r\n//         method: 'get',\r\n//         url: `${base}${url}`,\r\n//         data: params\r\n//     })\r\n// }\r\n\r\n// export default service\r\n\r\nimport axios from \"axios\"\r\n\r\n\r\nlet base = 'http://localhost:8081'\r\n\r\nexport const downloadRequest = (url) => {\r\n    return axios({\r\n        method: 'post',\r\n        url: `${base}${url}`,\r\n        responseType: 'arraybuffer'\r\n    })\r\n}"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAIC,IAAI,GAAG,uBAAX;AAEA,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAAS;EACpC,OAAOH,KAAK,CAAC;IACTI,MAAM,EAAE,MADC;IAETD,GAAG,EAAG,GAAEF,IAAK,GAAEE,GAAI,EAFV;IAGTE,YAAY,EAAE;EAHL,CAAD,CAAZ;AAKH,CANM"},"metadata":{},"sourceType":"module"}